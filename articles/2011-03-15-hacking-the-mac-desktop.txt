title: Hacking the Mac Desktop
author: Humza
tags: Mac, desktop, geektool, shell, pyhton, css, ruby

There are a ton of articles telling you how to customize you're Dock or add lots of menu bar-things on your Mac. This is another one of those kind of articles. However, this is probably the only one I will write, _and_ I haven't seen any articles that are exactly the same as this one. I'll be using something called [GeekTool](http://projects.tynsoe.org/en/geektool/), which lets you control desktop "geeklets" with shell scripts.

After you have downloaded GeekTool, not many exciting things will happen right away other than a new preference pane appering in System Preferences. Click on that preference pane. You get a choice of three "geeklets": image, file, and shell script. The image and file ones are quite boring; the cool part is the shell scripts. Drag a shell script geeklet onto your desktop. A geeklet settings window will magically appear. Next to the "command" field, click on the three dots. A mini text editor opens, where you can write a script that does something cool and GeekTool will print the output on your desktop. Let's try something simple:

	echo 'Hello, world' # The boring hello, world example again

That's cool, but how about something more dynamic. Something like printing the time backwards, updated every second, using Ruby.

	:::ruby
	#!/usr/bin/ruby
	time=Time.new
	time_string=time.to_s
	puts time_string.reverse

Now use the settings panel to make the script update every second. Choose some fancy fonts and colors, and you will ahve a functional backwards clock on your desktop. Now press the "Export…" button. GeekTool will export a .glet file so others can use it. Now for the fun part: in theory, it should be possible to do anything you can do on your computer inside a desktop widget thing. So, shouldn't styling a geeklet with custom CSS be possible? Maybe, with a tool written in python called `webkit2png`, which takes screenshots of webpages using WebKit and PyObjC, both of which should be included with your installation of Mac OS X. It can be installed easily with [Homebrew](http://mxcl.github.com/homebrew).

	brew install webkit2png
	
Now try running it on this blog post, just to test it.

	webkit2png http://secondplanet-blog.heroku.com/2011/03/15/hacking-the-mac-desktop

`webkit2png` should make images of the webpage. Now, if we put that into a geeklet, it will appear on the desktop _and_ it can be updated automatically. However, it would have no output. So, using the image geeklet, we can place an image generated by the output-less geeklet onto the desktop. So, if that is possible, creating your own webpage with some stylesheets and then use some JavaScript to create a cool-looking desktop widget. You could write vendor-specific CSS like gradients, and `webkit2png` won't care because it's just using WebKit. However, you may be wondering if you can style scripts with CSS using something other than JavaScript. Like the backwards time script. There are probably plenty of ways to so this. One is using a web technology like Ruby on Rails or Google App Engine to generate CSS and HTML based on the output of a shell script. Let's say we use Python. To start out, we could create a geeklet that runs the bacckwards time script and places the output in a plain text file.

	ruby backwardstime.rb >> backwardstime.txt

To test it, create a file geeklet pointing to backwardstime.txt. So, we could write some Ruby code that reads the file, places it into an HTML file that links a CSS stylesheet, which is then turned into an image using `webkit2png` and then have GeekTool place it on the Desktop.

	:::ruby
	#!/usr/bin/ruby
	html='backwardstime.html' # name of html file to print output to
	command_output='backwardstime.txt' # text file containing output of a command or shell script
	command_output_string=File.read command_output
	content=['<!doctype html>',
	         '<html>',
	         '<head>',
	         '<link rel="stylesheet" type="text/css" href="time.css">',
	         '<!-- linking a stylesheet with your CSS -->',
	         '<!-- title not really necessary -->',
	         '</head>',
	         '<body>',
	         '<p>', command_output_string, '</p>',
	         '</body>',
	         '</html>']
	
	File.open html, 'w' do |f|
		f.write content.to_s
	end

Now you can convert the webpage using `webkit2png` and use an image geeklet to display it on the desktop. Make all the geeklets involved update at the same time; then choose "Refresh all…" to make sure thay are in sync. I only covered how to do a few things, but ther are plenty of cool ideas you could come up with. Here are some:

- Using [`imagemagick`](http://imagemagick.org) with GeekTool
- Connecting to webapps to get data, then making it pretty with CSS
- Display your github or twitter on the desktop

