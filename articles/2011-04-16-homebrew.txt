title: Homebrew
author: Humza
tags: homebrew, ruby, mac, install, github

[Homebrew](http://mxcl.github.com/homebrew) is a really amazing tool for managing packages using the command-line on Mac OS X. It works well, and makes installing UNIX and UNIX stuff from source super-easy. It si also a great alternative to MacPorts or Fink, but if you are going to use Homebrew, you'll have to be ready to uninstall those first. Other than that, all you need to get started is a Mac (OS X 10.4 or higher), Ruby, and the Apple developer tools.

So, it's likely that if you use the command-line regularly, you'll have Fink or MacPorts. You will need to be prepared to do some deleting and to get rid of everything you ever did with Fink or MacPorts. If this thought scares you, then don't use Homebrew or continue with both tools at your own risk. First, Fink:

	fink list --installed >> ~/finkinstalled.txt # saves a list of what you installed
	sudo rm -rf /sw # this scary command deletes everything in /sw
	
And now, MacPorts:

	port installed >> ~/portinstalled.txt
	sudo port -f uninstall installed
	sudo rm -rf /opt/local
	
All done uninstalling. Now, to install Homebrew: Homebrew is written in [Ruby](http://ruby-lang.org). Mac comes with a system Ruby, so there are no problems for now. Next, go to [Homebrew wiki – Installation](https://github.com/mxcl/homebrew/wiki/Installation) and follow the instructions. This just `curl`'s Homebrew into `/usr/local/` and let's you use it without `sudo`. If you want to install it locally, just don't execute the first command and change the directory after "`-C`". However, `/usr/local` is recommended. Now we can get to the fun part. To install a package, just type `brew install <package name>`. `brew search` can help look for packages, and `brew info` for info. So that's mostly all you'll ever do with it. You could install [git](http://git-scm.com) or wget or whatever you want. You can install everything you just uninstalled from Fink and MacPorts, but be careful: they might not have the same name. In Homebrew, there are no duplicates or odd names. Usually, the package name is simply the same as the program name.

But there is more: that was just the boring bit. First, lets see what sets Homebrew apart from other package managers. The one _big_ difference is consistency. There are no duplicates, it's up to date, and every formula (nickname for a package in Homebrew) follows the same expectations. The code is clean, the installation is effortless, and it works excellently. Let's see a formula in action. Below is `etl.rb` from `Library/Formula/` in the Homebrew install.

	:::ruby
	# code from Github mxcl/homebrew
	require 'formula'
	
	class Etl < Formula
	  url 'https://downloads.sourceforge.net/project/synfig/ETL/0.04.13/ETL-0.04.13.tar.gz'
	  homepage 'http://synfig.org'
	  md5 'd52253adeb219d2fa554cbd744dfff29'
	
	  def install
	    system "./configure", "--disable-debug", "--disable-dependency-tracking",
	                         "--prefix=#{prefix}"
	    system "make install"
	  end
	end
	
Let's dissect that example: `Etl` is a Ruby class. In it you see a `url`, `homepage`, and `md5` followed by strings containing the corresponding values. These are fairly self-explanatory. Next is the installation method. That's it for a simple formula. Now look at `browser.rb` and `ranger.rb` to get an idea for what some other formulae are like. 

	:::ruby
	# code from Github mxcl/homebrew
	require 'formula'
	
	class Browser < GithubGistFormula
	  url 'https://gist.github.com/raw/318247/bcbcf6c5fb730b4f508c633cce56ba17828825c8/browser'
	  homepage 'https://gist.github.com/318247/'
	  md5 '8bdad2260651ea88d4f868071ef5b604'
	end

And `ranger`…

	:::ruby
	# code from Github mxcl/homebrew
	require 'formula'

	class Ranger < Formula
 	 url 'http://git.savannah.gnu.org/cgit/ranger.git/snapshot/ranger-1.4.3.tar.gz'
 	 homepage 'http://ranger.nongnu.org/'
	  md5 '90eccff2305a9500181c78fb6803a621'
	
	  def install
	    man1.install 'doc/ranger.1'
	    libexec.install ['ranger.py', 'ranger']
	    bin.mkpath
	    ln_s libexec+'ranger.py', bin+'ranger'
	  end
	end
	
Now, let's try a formula of our own. I'm going to be crating one for `libsoup`. So, I can start with this:

	brew create http://ftp.acc.umu.se/pub/gnome/sources/libsoup/2.33/libsoup-2.33.90.tar.gz
	
And Homebrew will create a template from the tarball. Now lets add the dependencies:

	:::ruby
	class Libsoup <Formula
	  url 'http://ftp.acc.umu.se/pub/gnome/sources/libsoup/2.33/libsoup-2.33.90.tar.gz'
	  homepage 'http://library.gnome.org/devel/libsoup/stable/'
	  md5 'f905e685f4e2fa6b414522e06d8db3c8'
	
	  depends_on 'pkg-config'
	  depends_on 'gnutls'
	  depends_on 'sqlite'
	
	  def install
	    system "./configure", "--disable-debug", "--disable-dependency-tracking",
	                          "--prefix=#{prefix}"
	    system "make install"
	  end
	end
	
It looks good. Now try installing. It will fail. Now add the arguments that make it work, which I have done:

	:::ruby
	class Libsoup <Formula
 	  url 'http://ftp.acc.umu.se/pub/gnome/sources/libsoup/2.33/libsoup-2.33.90.tar.gz'
 	  homepage 'http://library.gnome.org/devel/libsoup/stable/'
 	  md5 'f905e685f4e2fa6b414522e06d8db3c8'
	
 	  depends_on 'pkg-config'
 	  depends_on 'gnutls'
	  depends_on 'sqlite'
	
  	def install
    	system "./configure", "--disable-debug", "--disable-dependency-tracking",
        	                  "--prefix=#{prefix}",
            	              "--without-gnome",
                	          "--disable-tls-check"
    	system "make install"
  	  end
	end
	
That's better. Now it should work. To learn more, read the homebrew wiki on Github mxcl/homebrew.